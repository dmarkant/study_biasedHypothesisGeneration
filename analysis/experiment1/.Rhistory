if (nrow(subset(df.recall.wholeTrial, trial.load == 3)) == 0) {
#then there were no span size 3 trials, therefore
span.3.corr <- NA
} else {
span.3.corr <- sum(df.recall.wholeTrial$trial.success[df.recall.wholeTrial$trial.load == 3])
}
#span four trials correct
if (nrow(subset(df.recall.wholeTrial, trial.load == 4)) == 0) {
#then there were no span size 4 trials, therefore
span.4.corr <- NA
} else {
span.4.corr <- sum(df.recall.wholeTrial$trial.success[df.recall.wholeTrial$trial.load == 4])
}
#span five trials correct
if (nrow(subset(df.recall.wholeTrial, trial.load == 5)) == 0) {
#then there were no span size 5 trials, therefore
span.5.corr <- NA
} else {
span.5.corr <- sum(df.recall.wholeTrial$trial.success[df.recall.wholeTrial$trial.load == 5])
}
#span six trials correct
if (nrow(subset(df.recall.wholeTrial, trial.load == 6)) == 0) {
#then there were no span size 6 trials, therefore
span.6.corr <- NA
} else {
span.6.corr <- sum(df.recall.wholeTrial$trial.success[df.recall.wholeTrial$trial.load == 6])
}
#span seven trials correct
if (nrow(subset(df.recall.wholeTrial, trial.load == 7)) == 0) {
#then there were no span size 7 trials, therefore
span.7.corr <- NA
} else {
span.7.corr <- sum(df.recall.wholeTrial$trial.success[df.recall.wholeTrial$trial.load == 7])
}
#span eight trials correct
if (nrow(subset(df.recall.wholeTrial, trial.load == 8)) == 0) {
#then there were no span size 8 trials, therefore
span.8.corr <- NA
} else {
span.8.corr <- sum(df.recall.wholeTrial$trial.success[df.recall.wholeTrial$trial.load == 8])
}
#span nine trials correct
if (nrow(subset(df.recall.wholeTrial, trial.load == 9)) == 0) {
#then there were no span size 9 trials, therefore
span.9.corr <- NA
} else {
span.9.corr <- sum(df.recall.wholeTrial$trial.success[df.recall.wholeTrial$trial.load == 9])
}
fta.score <- sum(df.recall.wholeTrial$score)
prop.score <- mean(df.recall.wholeTrial$prop.corr)
number.successes <- sum(df.recall$trial.digit_span.result == "success")
processing.accuracy <- sum(df.operations$trial.operation_processing.result == "success") / nrow(df.operations)
processing.median.rt <- median(df.operations$trial.operation_processing.durationTime)
p.summary <- c(fta.score, prop.score, number.successes, processing.accuracy, processing.median.rt,
max.span, span.2.corr, span.3.corr, span.4.corr, span.5.corr, span.6.corr, span.7.corr, span.8.corr,
span.9.corr)
return(p.summary)
}
compile_operation_span_data <- function(filestring) {
raw.data <- read.csv(filestring)
ps <- unique(raw.data$session.subject.subject.code)
operation.span.data <- matrix(nrow=length(ps), ncol=14)
for (i in 1:length(ps)) {
#subset data frame with first unique subj code
sub.raw.data <- subset(raw.data, session.subject.subject.code == ps[i])
tmp.os.summary <- operation_span_processing(sub.raw.data)
operation.span.data[i, ] <- tmp.os.summary
}
operation.span.data <- as.data.frame(operation.span.data)
operation.span.data$user <- ps
os.names <- c("fta.score", "prop.score", "number.successes", "processing.accuracy", "processing.median.rt",
"max.span", "span.2.corr", "span.3.corr", "span.4.corr", "span.5.corr", "span.6.corr", "span.7.corr", "span.8.corr",
"span.9.corr", "pcode")
names(operation.span.data) <- os.names
return(operation.span.data)
}
files = c('OSPANdelanie430',
'OSPANdelaniecomp2',
'opscan_Xiong_2018-06-27_RoomA',
'opscan_Xiong_2018-06-27_RoomB',
'opscan_Xiong_2018-06-27_RoomC',
'opscan_Xiong_2018-06-27_RoomD',
'opscan_Gupta_2018-05-08_RoomA',
'Ospan_Padro_2018-05-07_Room B',
'Ospan_Padro_2018-05-07_Room C',
'Ospan_Padro_2018-05-07_Room D1',
'Ospan_Padro_2018-05-07_Room D2',
'arielle_roomB_5-8',
'ospan_arielle_roomA_5-8',
'Ospan_Arielle_roomC_5-8')
base_pth = '/Users/dmarkant/studies/study_active_transitive_inference/analysis/ospan/OSPAN Data'
ospandata = data.frame()
for (fn in files) {
pth = sprintf('%s/%s.csv', base_pth, fn)
print(pth)
df = compile_operation_span_data(pth)
ospandata = rbind(ospandata, df)
}
write.csv(ospandata, file=sprintf('%s/ospandata.csv', base_pth))
setwd("~/studies/study_active_transitive_inference")
suppressMessages(require(lme4))
suppressMessages(library(effects))
data = read.csv('data_proc/testdata.csv')
head(data)
data$ospan_fta
unique(data$ospan_fta)
data = data[data$ospan_fta!=NA]
data = data[data$ospan_fta!=NA,]
unique(data$ospan_fta)
data
data = data[data$ospan_fta~=NA,]
is.na(data$ospan_fta)
data[is.na(data$ospan_fta),]
data[,is.na(data$ospan_fta)]
data = data[(!is.na(data$ospan_fta)),]
data
data
data = read.csv('data_proc/testdata.csv')
data = data[(!is.na(data$ospan_fta)),]
data
data$sid = factor(data$sid)
data$gender = factor(data$gender)
data$session = factor(data$session, labels=c('test', 'retest'))
data$cond = factor(data$cond)
data$stim_type = factor(data$stim_type)
data$correct = factor(data$correct)
data$block = factor(data$block)
data$distance = scale(data$distance)
data$distance_bin = scale(data$distance_bin)
data$ospan_fta = scale(data$ospan_fta)
data$sel_med_rt = scale(data$sel_med_rt)
# selection RT
m = glmer(correct ~ sel_med_rt*cond*session + distance*cond + gender*cond + block + (1|sid),
data=data, family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(m)
m = glmer(correct ~
cond*session +
ospan_fta*cond +
distance*cond +
gender*cond + block + (1|sid),
data=data, family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(m)
m = glmer(correct ~
cond*session +
gender*ospan_fta*cond +
distance*cond +
gender*cond + block + (1|sid),
data=data, family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(m)
plot(effect("cond:ospan_fta", m))
plot(effect("cond:gender:ospan_fta", m))
head(data)
m = glmer(correct ~
cond +
ospan_fta*cond +
distance*cond +
gender*cond + block + (1|sid),
data=data[data$session=='test',], family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(m)
m = glmer(correct ~
gender*ospan_fta*cond +
distance +
block + (1|sid),
data=data[data$session=='test',], family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(m)
head(data)
data = read.csv('../data_proc/testdata.csv')
data = data[(!is.na(data$ospan_fta)),]
data$sid = factor(data$sid)
data$gender = factor(data$gender)
data$session = factor(data$session, labels=c('test', 'retest'))
data$cond = factor(data$cond)
data$stim_type = factor(data$stim_type)
data$correct = factor(data$correct)
data$block = factor(data$block)
data$distance = scale(data$distance)
data$distance_bin = scale(data$distance_bin)
data$ospan_fta = scale(data$ospan_fta)
data$sel_med_rt = scale(data$sel_med_rt)
head(data)
unique(data$sid)
length(unique(data$sid))
head(data)
ddply(data, c('sid'), function(x) { x$gender[1]})
library(plyr)
ddply(data, c('sid'), function(x) { x$gender[1]})
data = read.csv('../data_proc/testdata.csv')
data = data[(!is.na(data$ospan_fta)),]
data$sid = factor(data$sid)
data$gender = factor(data$gender)
data$session = factor(data$session, labels=c('test', 'retest'))
data$cond = factor(data$cond)
data$stim_type = factor(data$stim_type)
data$correct = factor(data$correct)
data$block = factor(data$block)
data$distance = scale(data$distance)
data$distance_bin = scale(data$distance_bin)
data$ospan_fta = scale(data$ospan_fta)
data$sel_med_rt = scale(data$sel_med_rt)
ddply(data, 'sid', function(x) {
ddply(data, 'sid', function(x) {
c(age=x$age[1],
gender=x$gender[1])
})
N = length(unique(data$sid))
ddply(data, 'sid', function(x) {
c(age=x$age[1],
gender=x$gender[1])
})
data$gender = factor(data$gender. labels=c('male', 'female'))
data$gender = factor(data$gender, labels=c('male', 'female'))
ddply(data, 'sid', function(x) {
c(age=x$age[1],
gender=x$gender[1])
})
demodf = ddply(data, 'sid', function(x) {
c(age=x$age[1],
gender=x$gender[1])
})
library(psych)
describe(demodf)
demodf
demodf$age
mean(demodf$age)
mean(demodf$age, na.rm=T)
round(mean(demodf$age, na.rm=T), 2)
demodf
demodf$gender
data$gender = factor(data$gender, labels=c('male', 'female'))
data$gender
demodf = ddply(data, 'sid', function(x) {
c(age=x$age[1],
gender=x$gender[1])
})
demodf
demodf$gender = factor(demodf$gender, labels=c('male', 'female'))
demodf$gender
count(demodf$gender)
data$sid = factor(data$sid)
data$gender = factor(data$gender, labels=c('female', 'male'))
demodf = ddply(data, 'sid', function(x) {
c(age=x$age[1],
gender=x$gender[1])
})
demodf$gender = factor(demodf$gender, labels=c('female', 'male'))
demodf$gender
count(demodf$gender)
demodf$gender=='female'
sum(demodf$gender=='female')
library(lme4)
library(lmerTest)
library(plyr)
library(grid)
library(gridExtra)
library(ggplot2)
library(multcomp)
setwd("~/studies/study_biasedHypothesisGeneration/analysis/experiment1")
data = read.csv('../../data_proc/experiment1/data_by_block.csv')
data$sid = factor(data$sid)
data$cond = factor(data$cond)
data$stimtype = relevel(factor(data$stimtype), ref='antenna')
data$ruletype = relevel(factor(data$ruletype), ref='rb')
data$rulevariant = factor(data$rulevariant)
data$block = scale(data$block)
data$hyp2D = as.logical(data$X2drule_aic)
data$hypMatch = ((data$ruletype=='rb') & (!data$hyp2D)) | ((data$ruletype=='ii') & (data$hyp2D))
data$repMatch = ((data$ruletype=='rb') & (data$stimtype=='antenna')) | ((data$ruletype=='ii') & (data$stimtype=='rectangle'))
data$prev_acc = NaN
for (sid in levels(data$sid)) {
acc = data[data$sid==sid,]$acc
prev_acc = c(0.5, acc[1:7])
data[data$sid==sid, 'prev_acc'] = prev_acc
}
data$change_acc = data$acc - data$prev_acc
data$prev_acc = scale(data$prev_acc)
data$change_acc = scale(data$change_acc)
m4 = lmer(dist_med ~ stimtype*ruletype*block + block*(ruletype/rulevariant) + prev_acc + (1|sid),
data=data, REML=T)
summary(m)
summary(m)
summary(m)
m = m4
summary(m)
D1_DIAL_ANGLE  = c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_DIAL_RADIUS = c(1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0)
D1_RECT_WIDTH  = c(1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_RECT_HEIGHT = c(1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0)
D2_DIAL_POS    = c(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D2_DIAL_NEG    = c(1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0)
D2_RECT_SIZE   = c(1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0)
D2_RECT_SHAPE  = c(1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0)
block_D1_DIAL_ANGLE   = c(0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)
block_D1_DIAL_RADIUS  = c(0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0)
block_D1_RECT_WIDTH   = c(0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0)
block_D1_RECT_HEIGHT  = c(0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0)
block_D2_DIAL_POS     = c(0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0)
block_D2_DIAL_NEG     = c(0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0)
block_D2_RECT_SIZE    = c(0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0)
block_D2_RECT_SHAPE   = c(0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,1)
c1 = rbind("D1_DIAL - D1_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D1_RECT_WIDTH + D1_RECT_HEIGHT)/2),
"D1_DIAL - D2_DIAL" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_DIAL - D2_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_RECT - D2_DIAL" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_RECT - D2_RECT" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D2_DIAL - D2_RECT" = ((D2_DIAL_POS + D2_DIAL_NEG)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_DIAL_ANGLE - D1_DIAL_RADIUS" = D1_DIAL_ANGLE - D1_DIAL_RADIUS,
"D1_RECT_WIDTH - D1_RECT_HEIGHT" = D1_RECT_WIDTH - D1_RECT_HEIGHT,
"D2_DIAL_POS - D2_DIAL_NEG" = D2_DIAL_POS - D2_DIAL_NEG,
"D2_RECT_SIZE - D2_RECT_SHAPE" = D2_RECT_SIZE - D2_RECT_SHAPE,
"block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS" = block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS,
"block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT" = block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT,
"block_D2_DIAL_POS - block_D2_DIAL_NEG" = block_D2_DIAL_POS - block_D2_DIAL_NEG,
"block_D2_RECT_SIZE - block_D2_RECT_SHAPE" = block_D2_RECT_SIZE - block_D2_RECT_SHAPE
)
summary(glht(m, c1), test = adjusted("bonferroni"))
block_D1_DIAL_ANGLE + block_D2_DIAL_NEG
block_D1_DIAL_ANGLE + block_D1_DIAL_RADIUS
block = (block_D1_DIAL_ANGLE + block_D1_DIAL_RADIUS +
block_D1_RECT_HEIGHT + block_D1_RECT_WIDTH +
block_D2_DIAL_NEG + block_D2_DIAL_POS +
block_D2_RECT_SHAPE + block_D2_RECT_SIZE)/8
block
sum(block)
c1 = rbind("D1_DIAL - D1_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D1_RECT_WIDTH + D1_RECT_HEIGHT)/2),
"D1_DIAL - D2_DIAL" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_DIAL - D2_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_RECT - D2_DIAL" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_RECT - D2_RECT" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D2_DIAL - D2_RECT" = ((D2_DIAL_POS + D2_DIAL_NEG)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_DIAL_ANGLE - D1_DIAL_RADIUS" = D1_DIAL_ANGLE - D1_DIAL_RADIUS,
"D1_RECT_WIDTH - D1_RECT_HEIGHT" = D1_RECT_WIDTH - D1_RECT_HEIGHT,
"D2_DIAL_POS - D2_DIAL_NEG" = D2_DIAL_POS - D2_DIAL_NEG,
"D2_RECT_SIZE - D2_RECT_SHAPE" = D2_RECT_SIZE - D2_RECT_SHAPE,
"block" = block,
"block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS" = block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS,
"block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT" = block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT,
"block_D2_DIAL_POS - block_D2_DIAL_NEG" = block_D2_DIAL_POS - block_D2_DIAL_NEG,
"block_D2_RECT_SIZE - block_D2_RECT_SHAPE" = block_D2_RECT_SIZE - block_D2_RECT_SHAPE
)
summary(glht(m, c1), test = adjusted("bonferroni"))
prev_acc = c(0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0)
c1 = rbind("D1_DIAL - D1_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D1_RECT_WIDTH + D1_RECT_HEIGHT)/2),
"D1_DIAL - D2_DIAL" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_DIAL - D2_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_RECT - D2_DIAL" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_RECT - D2_RECT" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D2_DIAL - D2_RECT" = ((D2_DIAL_POS + D2_DIAL_NEG)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_DIAL_ANGLE - D1_DIAL_RADIUS" = D1_DIAL_ANGLE - D1_DIAL_RADIUS,
"D1_RECT_WIDTH - D1_RECT_HEIGHT" = D1_RECT_WIDTH - D1_RECT_HEIGHT,
"D2_DIAL_POS - D2_DIAL_NEG" = D2_DIAL_POS - D2_DIAL_NEG,
"D2_RECT_SIZE - D2_RECT_SHAPE" = D2_RECT_SIZE - D2_RECT_SHAPE,
"block" = block,
"prev_acc" = prev_acc,
"block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS" = block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS,
"block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT" = block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT,
"block_D2_DIAL_POS - block_D2_DIAL_NEG" = block_D2_DIAL_POS - block_D2_DIAL_NEG,
"block_D2_RECT_SIZE - block_D2_RECT_SHAPE" = block_D2_RECT_SIZE - block_D2_RECT_SHAPE
)
summary(glht(m, c1), test = adjusted("bonferroni"))
library(lme4)
library(lmerTest)
library(plyr)
library(grid)
library(gridExtra)
library(ggplot2)
library(multcomp)
setwd("~/studies/study_biasedHypothesisGeneration/analysis/experiment1")
data = read.csv('../../data_proc/experiment1/data_by_block.csv')
data$sid = factor(data$sid)
data$cond = factor(data$cond)
data$stimtype = relevel(factor(data$stimtype), ref='antenna')
data$ruletype = relevel(factor(data$ruletype), ref='rb')
data$rulevariant = factor(data$rulevariant)
data$block = scale(data$block)
data$hyp2D = as.logical(data$X2drule_aic)
data$hypMatch = ((data$ruletype=='rb') & (!data$hyp2D)) | ((data$ruletype=='ii') & (data$hyp2D))
data$repMatch = ((data$ruletype=='rb') & (data$stimtype=='antenna')) | ((data$ruletype=='ii') & (data$stimtype=='rectangle'))
data$prev_acc = NaN
for (sid in levels(data$sid)) {
acc = data[data$sid==sid,]$acc
prev_acc = c(0.5, acc[1:7])
data[data$sid==sid, 'prev_acc'] = prev_acc
}
data$change_acc = data$acc - data$prev_acc
data$prev_acc = scale(data$prev_acc)
data$change_acc = scale(data$change_acc)
m1 = glmer(acc ~ stimtype*ruletype + block + ruletype/rulevariant + (1|sid),
weights=rep(32, nrow(data)), data=data, family=binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 10)
m2 = glmer(acc ~ stimtype*ruletype*block + ruletype/rulevariant + (1|sid),
weights=rep(32, nrow(data)), data=data, family=binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 10)
anova(m1,m2)
m3 = glmer(acc ~ stimtype*ruletype*block + block*(ruletype/rulevariant) + (1|sid),
weights=rep(32, nrow(data)), data=data, family=binomial,
control = glmerControl(optimizer = "bobyqa"), nAGQ = 10)
summary(m3)
anova(m2,m3)
round(c(AIC(m1), AIC(m2), AIC(m3)))
summary(m3)
D1_DIAL_ANGLE  = c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_DIAL_RADIUS = c(1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0)
D1_RECT_WIDTH  = c(1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_RECT_HEIGHT = c(1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0)
D2_DIAL_POS    = c(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)
D2_DIAL_NEG    = c(1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0)
D2_RECT_SIZE   = c(1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0)
D2_RECT_SHAPE  = c(1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0)
block_D1_DIAL_ANGLE   = c(0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0)
block_D1_DIAL_RADIUS  = c(0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0)
block_D1_RECT_WIDTH   = c(0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
block_D1_RECT_HEIGHT  = c(0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0)
block_D2_DIAL_POS     = c(0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0)
block_D2_DIAL_NEG     = c(0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0)
block_D2_RECT_SIZE    = c(0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0)
block_D2_RECT_SHAPE   = c(0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1)
c1 = rbind("D1_DIAL - D1_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D1_RECT_WIDTH + D1_RECT_HEIGHT)/2),
"D1_DIAL - D2_DIAL" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_DIAL - D2_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_RECT - D2_DIAL" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_RECT - D2_RECT" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D2_DIAL - D2_RECT" = ((D2_DIAL_POS + D2_DIAL_NEG)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_DIAL_ANGLE - D1_DIAL_RADIUS" = D1_DIAL_ANGLE - D1_DIAL_RADIUS,
"D1_RECT_WIDTH - D1_RECT_HEIGHT" = D1_RECT_WIDTH - D1_RECT_HEIGHT,
"D2_DIAL_POS - D2_DIAL_NEG" = D2_DIAL_POS - D2_DIAL_NEG,
"D2_RECT_SIZE - D2_RECT_SHAPE" = D2_RECT_SIZE - D2_RECT_SHAPE,
"D2_DIAL - D2_RECT_SIZE" = (D2_DIAL_POS + D2_DIAL_NEG)/2 - D2_RECT_SIZE,
"block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS" = block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS,
"block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT" = block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT,
"block_D2_DIAL_POS - block_D2_DIAL_NEG" = block_D2_DIAL_POS - block_D2_DIAL_NEG,
"block_D2_RECT_SIZE - block_D2_RECT_SHAPE" = block_D2_RECT_SIZE - block_D2_RECT_SHAPE
)
mc = glht(m, c1)
summary(glht(m, c1), test = adjusted("bonferroni"))
confint(glht(m, c1))
m = m3
D1_DIAL_ANGLE  = c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_DIAL_RADIUS = c(1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0)
D1_RECT_WIDTH  = c(1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_RECT_HEIGHT = c(1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0)
D2_DIAL_POS    = c(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)
D2_DIAL_NEG    = c(1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0)
D2_RECT_SIZE   = c(1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0)
D2_RECT_SHAPE  = c(1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0)
block_D1_DIAL_ANGLE   = c(0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0)
block_D1_DIAL_RADIUS  = c(0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0)
block_D1_RECT_WIDTH   = c(0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
block_D1_RECT_HEIGHT  = c(0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0)
block_D2_DIAL_POS     = c(0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0)
block_D2_DIAL_NEG     = c(0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0)
block_D2_RECT_SIZE    = c(0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0)
block_D2_RECT_SHAPE   = c(0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1)
c1 = rbind("D1_DIAL - D1_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D1_RECT_WIDTH + D1_RECT_HEIGHT)/2),
"D1_DIAL - D2_DIAL" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_DIAL - D2_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_RECT - D2_DIAL" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_RECT - D2_RECT" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D2_DIAL - D2_RECT" = ((D2_DIAL_POS + D2_DIAL_NEG)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_DIAL_ANGLE - D1_DIAL_RADIUS" = D1_DIAL_ANGLE - D1_DIAL_RADIUS,
"D1_RECT_WIDTH - D1_RECT_HEIGHT" = D1_RECT_WIDTH - D1_RECT_HEIGHT,
"D2_DIAL_POS - D2_DIAL_NEG" = D2_DIAL_POS - D2_DIAL_NEG,
"D2_RECT_SIZE - D2_RECT_SHAPE" = D2_RECT_SIZE - D2_RECT_SHAPE,
"D2_DIAL - D2_RECT_SIZE" = (D2_DIAL_POS + D2_DIAL_NEG)/2 - D2_RECT_SIZE,
"block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS" = block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS,
"block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT" = block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT,
"block_D2_DIAL_POS - block_D2_DIAL_NEG" = block_D2_DIAL_POS - block_D2_DIAL_NEG,
"block_D2_RECT_SIZE - block_D2_RECT_SHAPE" = block_D2_RECT_SIZE - block_D2_RECT_SHAPE
)
mc = glht(m, c1)
summary(glht(m, c1), test = adjusted("bonferroni"))
confint(glht(m, c1))
D1_DIAL_ANGLE  = c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_DIAL_RADIUS = c(1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0)
D1_RECT_WIDTH  = c(1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_RECT_HEIGHT = c(1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0)
D2_DIAL_POS    = c(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)
D2_DIAL_NEG    = c(1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0)
D2_RECT_SIZE   = c(1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0)
D2_RECT_SHAPE  = c(1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0)
block_D1_DIAL_ANGLE   = c(0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0)
block_D1_DIAL_RADIUS  = c(0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0)
block_D1_RECT_WIDTH   = c(0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
block_D1_RECT_HEIGHT  = c(0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0)
block_D2_DIAL_POS     = c(0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0)
block_D2_DIAL_NEG     = c(0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0)
block_D2_RECT_SIZE    = c(0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0)
block_D2_RECT_SHAPE   = c(0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1)
c1 = rbind("D1_DIAL - D1_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D1_RECT_WIDTH + D1_RECT_HEIGHT)/2),
"D1_DIAL - D2_DIAL" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_DIAL - D2_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_RECT - D2_DIAL" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_RECT - D2_RECT" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D2_DIAL - D2_RECT" = ((D2_DIAL_POS + D2_DIAL_NEG)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_DIAL_ANGLE - D1_DIAL_RADIUS" = D1_DIAL_ANGLE - D1_DIAL_RADIUS,
"D1_RECT_WIDTH - D1_RECT_HEIGHT" = D1_RECT_WIDTH - D1_RECT_HEIGHT,
"D2_DIAL_POS - D2_DIAL_NEG" = D2_DIAL_POS - D2_DIAL_NEG,
"D2_RECT_SIZE - D2_RECT_SHAPE" = D2_RECT_SIZE - D2_RECT_SHAPE,
"D2_DIAL - D2_RECT_SIZE" = (D2_DIAL_POS + D2_DIAL_NEG)/2 - D2_RECT_SIZE,
"block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS" = block_D1_DIAL_ANGLE - block_D1_DIAL_RADIUS,
"block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT" = block_D1_RECT_WIDTH - block_D1_RECT_HEIGHT,
"block_D2_DIAL_POS - block_D2_DIAL_NEG" = block_D2_DIAL_POS - block_D2_DIAL_NEG,
"block_D2_RECT_SIZE - block_D2_RECT_SHAPE" = block_D2_RECT_SIZE - block_D2_RECT_SHAPE
)
mc = glht(m, c1)
summary(glht(m, c1), test = adjusted("bonferroni"))
confint(glht(m, c1))
summary(glht(m, c1), test = adjusted("bonferroni"))
