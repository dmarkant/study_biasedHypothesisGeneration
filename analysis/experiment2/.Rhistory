pd = position_dodge(.3)
plt.acc = ggplot(data=agg) +
geom_errorbar(aes(x=factor(distance_bin), ymin=acc.mn-cmci, ymax=acc.mn+cmci, group=Condition), color='black', width=0, position=pd) +
geom_line(aes(x=factor(distance_bin), y=acc.mn, group=Condition, linetype=Condition), position=pd, color='black') +
geom_point(aes(x=distance_bin, y=acc.mn, group=Condition, fill=Condition), shape=21, size=1.5, position=pd) +
scale_fill_manual(values=c('black', 'white')) +
facet_wrap(~ ospan_bin + session, ncol=4) +
scale_x_discrete("Distance") +
scale_y_continuous("% correct", limits=c(.55,.95)) +
ggtitle('Test accuracy') +
theme_apa() +
theme(aspect.ratio=1.5,
axis.text.x = element_text(size=9, angle = 45, hjust = 1),
axis.text=element_text(size=9),
plot.title = element_text(size=11, face="bold", hjust=.5, margin=margin(0,0,.4,0, 'lines')),
plot.margin = unit(c(1, .5, 1, 0.5), "lines"),
panel.background = element_rect(fill = "white", colour = "grey20"),
panel.spacing = unit(.2,'cm'),
legend.margin = margin(0,0,0,0),
legend.title = element_text(size=11),
strip.text.x = element_text(size=10, margin=margin(0.1, 0, 0.3, 0, "lines")),
strip.text.y = element_text(size=10, margin=margin(0, 0.2, 0, 0.6, "lines")))
# add selection RT to the model
#model.acc_sel_rt = update(model.acc, . ~ . + sc.sel_med_rt)
#ef_sel_rt_active    = c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0)
#ef_sel_rt_yoked     = c(0, 0, 0, 0, 0, 1, 0, 0, 0, 1)
#contr = rbind("sel_rt | active" = ef_sel_rt_active,
#              "sel_rt | yoked" = ef_sel_rt_yoked)
#mc.sel_rt = summary(glht(model.sel_rt, linfct=contr),
#                       test=adjusted('none'))
model.acc_split = glmer(correct ~
session*cond*ospan_bin +
(1|sid) + (1|pair_id),
data=testdata, family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(model.acc_split)
ef_active_test_low    = c(1, 0, 0, 0, 0, 0, 0, 0)
ef_active_retest_low  = c(1, 1, 0, 0, 0, 0, 0, 0)
ef_active_test_high   = c(1, 0, 0, 1, 0, 0, 0, 0)
ef_active_retest_high = c(1, 1, 0, 1, 0, 1, 0, 0)
ef_yoked_test_low    = c(1, 0, 1, 0, 0, 0, 0, 0)
ef_yoked_retest_low  = c(1, 1, 1, 0, 1, 0, 0, 0)
ef_yoked_test_high   = c(1, 0, 1, 1, 0, 0, 1, 0)
ef_yoked_retest_high = c(1, 1, 1, 1, 1, 1, 1, 1)
ef_yoked_retest_by_ospan = (ef_yoked_test_low - ef_yoked_retest_low) - (ef_yoked_test_high - ef_yoked_retest_high)
contr = rbind("active - yoked | test, low" = ef_active_test_low - ef_yoked_test_low,
"active - yoked | retest, low" = ef_active_retest_low - ef_yoked_retest_low,
"active - yoked | test, high" = ef_active_test_high - ef_yoked_test_high,
"active - yoked | retest, high" = ef_active_retest_high - ef_yoked_retest_high,
"retest - test | active, low" = ef_active_retest_low - ef_active_test_low,
"retest - test | active, high" = ef_active_retest_high - ef_active_test_high,
"retest - test | yoked, low" = ef_yoked_retest_low - ef_yoked_test_low,
"retest - test | yoked, high" = ef_yoked_retest_high - ef_yoked_test_high,
"yoked retest" = ef_yoked_retest_by_ospan)
mc.acc_split = summary(glht(model.acc_split, linfct=contr),
test=adjusted('none'))
OR.acc_split = exp(confint(mc.acc_split)$confint)
# Proportion near -----
activedata = testdata[testdata$cond=='active',]
model.acc_active = glmer(correct ~
session +
sc.ospan_fta +
sc.distance_bin +
sc.prop_near_neg2 +
sc.prop_near_neg1 +
sc.prop_near_pos1 +
sc.prop_near_pos2 +
(1|sid) + (1|pair_id),
data=activedata, family='binomial',
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
summary(model.acc_active)
contr = rbind("prop_near_neg2" = c(0,0,0,0,1,0,0,0),
"prop_near_neg1" = c(0,0,0,0,0,1,0,0),
"prop_near_pos1" = c(0,0,0,0,0,0,1,0),
"prop_near_pos2" = c(0,0,0,0,0,0,0,1))
mc.acc_active = summary(glht(model.acc_active, linfct=contr),
test=adjusted('none'))
OR.acc_active = exp(confint(mc.acc_active)$confint)
# Response time during test: Excluding endpoints -----
agg = ddply(testdata, c('sid', 'distance_bin',
'sc.ospan_fta', 'session', 'cond', 'sc.distance_bin'), function(x) {
c(med_rt=median(x$rt))
})
agg$distance_bin = factor(agg$distance_bin, labels=c('recall', 'near inference', 'far inference'))
desc.rt = ddply(agg, c('session', 'cond'), function(x) {
c(mn=round(mean(x$med_rt)),
sd=round(sd(x$med_rt)))
})
model.rt = lmer(med_rt ~
session*cond*sc.distance_bin +
sc.ospan_fta*cond + (1|sid),
data=agg)
summary(model.rt)
ef_active.test            = c(0, 0, -1,0, 0, 0, 0, 0, 0, 0)
ef_active.retest          = c(0, 0, -1,0, 0,-1, 0, 0, 0, 0)
ef_retest_active          = c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0)
ef_retest_yoked           = c(0, 1, 0, 0, 0, 1, 0, 0, 0, 0)
ef_distance.active_test   = c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0)
ef_distance.active_retest = c(0, 0, 0, 1, 0, 0, 1, 0, 0, 0)
ef_distance.yoked_test    = c(0, 0, 0, 1, 0, 0, 0, 1, 0, 0)
ef_distance.yoked_retest  = c(0, 0, 0, 1, 0, 0, 0, 1, 0, 1)
ef_ospan_active           = c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0)
ef_ospan_yoked            = c(0, 0, 0, 0, 1, 0, 0, 0, 1, 0)
contr = rbind("active - yoked | test" = ef_active.test,
"active - yoked | retest" = ef_active.retest,
"test - retest | active" = ef_retest_active,
"test - retest | yoked" = ef_retest_yoked,
"distance | active, test" = ef_distance.active_test,
"distance | active, retest" = ef_distance.active_retest,
"distance | yoked, test" = ef_distance.yoked_test,
"distance | yoked, retest" = ef_distance.yoked_retest,
"ospan | active" = ef_ospan_active,
"ospan | yoked" = ef_ospan_yoked)
mc.rt = summary(glht(model.rt, linfct=contr),
test=adjusted('none'))
mc.rt = confint(mc.rt)
cis = CMCI(med_rt ~ distance_bin + cond + session, agg, grouping.var="sid")
cisdf = reshape2::melt(cis)
cisdf = plyr::rename(cisdf,c('value'='cmci'))
agg2 = ddply(agg, c('session', 'cond', 'distance_bin'), function(x) {
c(mn=mean(x$med_rt))
})
agg2 = dplyr::left_join(agg2, cisdf)
agg2$Condition = agg2$cond
levels(agg2$Condition) = c('active', 'passive')
agg2$session = factor(agg2$session, labels=c('Test', 'Retest'))
#agg2$ospan_bin = factor(agg2$ospan_bin, labels=c('Low WM', 'High WM'))
pd = position_dodge(.3)
plt.rt = ggplot(data=agg2) +
geom_errorbar(aes(x=distance_bin, ymin=mn-cmci, ymax=mn+cmci, group=Condition), color='black', width=0, position=pd) +
geom_line(aes(x=factor(distance_bin), y=mn, group=Condition, linetype=Condition), position=pd, color='black') +
geom_point(aes(x=distance_bin, y=mn, group=Condition, fill=Condition), shape=21, size=1.5, position=pd) +
scale_fill_manual(values=c('black', 'white')) +
facet_wrap(~ session, ncol=4) +
scale_x_discrete("Distance") +
scale_y_continuous("Median RT (ms)") +
ggtitle('Test RT') +
theme_apa() +
theme(aspect.ratio=1.5,
axis.text.x = element_text(size=9, angle = 45, hjust = 1),
axis.text=element_text(size=9),
plot.title = element_text(size=11, face="bold", hjust=.5, margin=margin(0,0,.4,0, 'lines')),
plot.margin = unit(c(1, .5, 1, 0.5), "lines"),
panel.background = element_rect(fill = "white", colour = "grey20"),
panel.spacing = unit(.2,'cm'),
legend.margin = margin(0,0,0,0),
legend.title = element_text(size=11),
strip.text.x = element_text(size=10, margin=margin(0.1, 0, 0.3, 0, "lines")),
strip.text.y = element_text(size=10, margin=margin(0, 0.2, 0, 0.6, "lines")))
# Response time during test: Endpoints only -----
testdata = data[data$endpoint==T,]
agg = ddply(testdata, c('sid', 'distance_bin',
'sc.ospan_fta', 'session', 'cond', 'sc.distance_bin'), function(x) {
c(med_rt=median(x$rt))
})
agg$distance_bin = factor(agg$distance_bin, labels=c('recall', 'near inference', 'far inference'))
desc.rt_endpoint = ddply(agg, c('session', 'cond'), function(x) {
c(mn=round(mean(x$med_rt)),
sd=round(sd(x$med_rt)))
})
model.rt_endpoint = lmer(med_rt ~
session*cond*sc.distance_bin +
sc.ospan_fta*cond + (1|sid),
data=agg)
summary(model.rt_endpoint)
ef_active.test            = c(0, 0, -1,0, 0, 0, 0, 0, 0, 0)
ef_active.retest          = c(0, 0, -1,0, 0,-1, 0, 0, 0, 0)
ef_retest_active          = c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0)
ef_retest_yoked           = c(0, 1, 0, 0, 0, 1, 0, 0, 0, 0)
ef_distance.active_test   = c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0)
ef_distance.active_retest = c(0, 0, 0, 1, 0, 0, 1, 0, 0, 0)
ef_distance.yoked_test    = c(0, 0, 0, 1, 0, 0, 0, 1, 0, 0)
ef_distance.yoked_retest  = c(0, 0, 0, 1, 0, 0, 0, 1, 0, 1)
ef_ospan_active           = c(0, 0, 0, 0, 1, 0, 0, 0, 0, 0)
ef_ospan_yoked            = c(0, 0, 0, 0, 1, 0, 0, 0, 1, 0)
contr = rbind("active - yoked | test" = ef_active.test,
"active - yoked | retest" = ef_active.retest,
"test - retest | active" = ef_retest_active,
"test - retest | yoked" = ef_retest_yoked,
"distance | active, test" = ef_distance.active_test,
"distance | active, retest" = ef_distance.active_retest,
"distance | yoked, test" = ef_distance.yoked_test,
"distance | yoked, retest" = ef_distance.yoked_retest,
"ospan | active" = ef_ospan_active,
"ospan | yoked" = ef_ospan_yoked)
mc.rt_endpoint = summary(glht(model.rt_endpoint, linfct=contr),
test=adjusted('none'))
mc.rt_endpoint = confint(mc.rt_endpoint)
cis = CMCI(med_rt ~ distance_bin + cond + session, agg, grouping.var="sid")
cisdf = reshape2::melt(cis)
cisdf = plyr::rename(cisdf,c('value'='cmci'))
agg2 = ddply(agg, c('session', 'cond', 'distance_bin'), function(x) {
c(mn=mean(x$med_rt))
})
agg2 = dplyr::left_join(agg2, cisdf)
agg2$Condition = agg2$cond
levels(agg2$Condition) = c('active', 'passive')
agg2$session = factor(agg2$session, labels=c('Test', 'Retest'))
#agg2$ospan_bin = factor(agg2$ospan_bin, labels=c('Low WM', 'High WM'))
pd = position_dodge(.3)
plt.rt_endpoint = ggplot(data=agg2) +
geom_errorbar(aes(x=distance_bin, ymin=mn-cmci, ymax=mn+cmci, group=Condition), color='black', width=0, position=pd) +
geom_line(aes(x=factor(distance_bin), y=mn, group=Condition, linetype=Condition), position=pd, color='black') +
geom_point(aes(x=distance_bin, y=mn, group=Condition, fill=Condition), shape=21, size=1.5, position=pd) +
scale_fill_manual(values=c('black', 'white')) +
facet_wrap(~ session, ncol=4) +
scale_x_discrete("Distance") +
scale_y_continuous("Median RT (ms)") +
ggtitle('Test RT') +
theme_apa() +
theme(aspect.ratio=1.5,
axis.text.x = element_text(size=9, angle = 45, hjust = 1),
axis.text=element_text(size=9),
plot.title = element_text(size=11, face="bold", hjust=.5, margin=margin(0,0,.4,0, 'lines')),
plot.margin = unit(c(1, .5, 1, 0.5), "lines"),
panel.background = element_rect(fill = "white", colour = "grey20"),
panel.spacing = unit(.2,'cm'),
legend.margin = margin(0,0,0,0),
legend.title = element_text(size=11),
strip.text.x = element_text(size=10, margin=margin(0.1, 0, 0.3, 0, "lines")),
strip.text.y = element_text(size=10, margin=margin(0, 0.2, 0, 0.6, "lines")))
mc.rt
round(mc.rt)
mc.rt
td = testdata
agg = ddply(td, c('sid', 'ospan_bin', 'session', 'cond', 'distance_bin'), function(x) {
c(acc=mean(x$correct==1))
})
agg = ddply(agg, c('ospan_bin', 'session', 'cond', 'distance_bin'), function(x) {
c(acc.mn=mean(x$acc), acc.sd=sd(x$acc))
})
agg
td = testdata
agg = ddply(td, c('sid', 'ospan_bin', 'session', 'cond'), function(x) {
c(acc=mean(x$correct==1))
})
agg = ddply(agg, c('ospan_bin', 'session', 'cond'), function(x) {
c(acc.mn=mean(x$acc), acc.sd=sd(x$acc))
})
agg
.84-.72
head(testdata)
testdata = data[data$endpoint==F,]
td = testdata
agg = ddply(td, c('sid', 'ospan_bin', 'session', 'cond'), function(x) {
c(acc=mean(x$correct==1))
})
agg = ddply(agg, c('ospan_bin', 'session', 'cond'), function(x) {
c(acc.mn=mean(x$acc), acc.sd=sd(x$acc))
})
agg
.828-.619
data
library("papaja")
library(lme4)
library(lmerTest)
library(effects)
library(plyr)
library(dplyr)
library(tidyr)
library(psych)
library(multcomp)
library(stargazer)
library(ggplot2)
library(grid)
library(gridExtra)
library(cowplot)
library(mlogit)
library(emmeans)
data = read.csv('../data_proc/testdata.csv')
data = unite(data, 'pair_id', c('lower_id', 'higher_id'))
# for now, only participants with OSpan data
data = data[(!is.na(data$ospan_fta)),]
data$sid = factor(data$sid)
data$sid
levels(data$sid)
c(5,7,10,4,8,6,11,6,7,6)
sd(c(5,7,10,4,8,6,11,6,7,6))
library(lme4)
library(lmerTest)
library(plyr)
library(grid)
library(gridExtra)
library(ggplot2)
library(multcomp)
setwd("~/studies/study_biasedHypothesisGeneration/analysis/experiment1")
data = read.csv('../../data_proc/experiment1/data_by_block.csv')
data$sid = factor(data$sid)
data$cond = factor(data$cond)
data$stimtype = relevel(factor(data$stimtype), ref='antenna')
data$ruletype = relevel(factor(data$ruletype), ref='rb')
data$rulevariant = factor(data$rulevariant)
#data$block = scale(data$block)
data$block = data$block - mean(data$block)
data$hyp2D = as.logical(data$X2drule_aic)
data$hypMatch = ((data$ruletype=='rb') & (!data$hyp2D)) | ((data$ruletype=='ii') & (data$hyp2D))
data$repMatch = ((data$ruletype=='rb') & (data$stimtype=='antenna')) | ((data$ruletype=='ii') & (data$stimtype=='rectangle'))
data$prev_acc = NaN
for (sid in levels(data$sid)) {
acc = data[data$sid==sid,]$acc
prev_acc = c(0.5, acc[1:7])
data[data$sid==sid, 'prev_acc'] = prev_acc
}
data$change_acc = data$acc - data$prev_acc
data$prev_acc = scale(data$prev_acc)
data$change_acc = scale(data$change_acc)
# case of quasi-complete separation -- in the 2D-RECT-shape condition,
# all 100% 2D boundaries. So need to use Firth's bias correction
# https://web.warwick.ac.uk/statsdept/user-2011/TalkSlides/Contributed/18Aug_0950_FocusVI_3-GLM-3-Kosmidis.pdf
library(brglm)
m2 = brglm(hyp2D ~ ruletype*stimtype*block + ruletype/rulevariant,
family=binomial, data=data, REML=F)
m = m2
f = m
M = model.matrix(f)
# Save the "assign" and "contrasts" attributes of the model matrix.
attr.assign = attr(M, "assign")
attr.contrasts = attr(M, "contrasts")
rmvCols = c(1, which(summary(f)$aliased))
M = M[,-rmvCols] # Remove intercept column (required) and NA columns
# Reassign the "assign" attribute, removing the corresponding elements from it.
attr(M, "assign") = attr.assign[-rmvCols]
# Reassign the "contrasts" attribute to its original value
attr(M, "contrasts") = attr.contrasts
f2 = update(f, ~M)
summary(f2)
m = f2
D1_DIAL_ANGLE  = c(1,0,0,0,0,0,0,0,0,0,0,0)
D1_DIAL_RADIUS = c(1,0,0,0,0,0,0,0,0,1,0,0)
D1_RECT_HEIGHT = c(1,0,1,0,0,0,0,1,0,0,0,0)
D1_RECT_WIDTH  = c(1,0,1,0,0,0,0,0,0,0,0,0)
D2_DIAL_POS    = c(1,1,0,0,0,0,0,0,0,0,0,0)
D2_DIAL_NEG    = c(1,1,0,0,0,0,0,0,1,0,0,0)
D2_RECT_SIZE   = c(1,1,1,0,1,0,0,0,0,0,0,0)
D2_RECT_SHAPE  = c(1,1,1,0,1,0,0,0,0,0,1,0)
block_D1_DIAL   = c(0,0,0,1,0,0,0,0,0,0,0,0)
block_D1_RECT   = c(0,0,0,1,0,0,1,0,0,0,0,0)
block_D2_DIAL   = c(0,0,0,1,0,1,0,0,0,0,0,0)
block_D2_RECT   = c(0,0,0,1,0,1,1,0,0,0,0,1)
c1 = rbind("D1_DIAL - D1_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D1_RECT_WIDTH + D1_RECT_HEIGHT)/2),
"D1_DIAL - D2_DIAL" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_DIAL - D2_RECT" = ((D1_DIAL_ANGLE + D1_DIAL_RADIUS)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_RECT - D2_DIAL" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_DIAL_POS + D2_DIAL_NEG)/2),
"D1_RECT - D2_RECT" = ((D1_RECT_WIDTH + D1_RECT_HEIGHT)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D2_DIAL - D2_RECT" = ((D2_DIAL_POS + D2_DIAL_NEG)/2 - (D2_RECT_SIZE + D2_RECT_SHAPE)/2),
"D1_DIAL_ANGLE - D1_DIAL_RADIUS" = D1_DIAL_ANGLE - D1_DIAL_RADIUS,
"D1_RECT_WIDTH - D1_RECT_HEIGHT" = D1_RECT_WIDTH - D1_RECT_HEIGHT,
"D2_DIAL_POS - D2_DIAL_NEG" = D2_DIAL_POS - D2_DIAL_NEG,
"D2_RECT_SIZE - D2_RECT_SHAPE" = D2_RECT_SIZE - D2_RECT_SHAPE,
"block_D1_DIAL" = block_D1_DIAL,
"block_D1_RECT" = block_D1_RECT,
"block_D2_DIAL" = block_D2_DIAL,
"block_D2_RECT" = block_D2_RECT
)
summary(glht(m, c1), test = adjusted("bonferroni"))
setwd("~/studies/study_biasedHypothesisGeneration/analysis/experiment2")
data = read.csv('../../data_proc/experiment2/data_by_block.csv')
data$sid = factor(data$sid)
data$cond = factor(data$cond)
data$ruletype = factor(data$ruletype)
data$dimtype = factor(data$dimtype)
data$rulerelation = factor(data$rulerelation)
#data$block = scale(data$block)
data$block = data$block - mean(data$block)
data$repMatch = ((data$ruletype=='1D') & (data$dimtype=='absolute')) | ((data$ruletype=='2D') & (data$dimtype=='relative'))
data$prev_acc = NaN
for (sid in levels(data$sid)) {
acc = data[data$sid==sid,]$acc
prev_acc = c(0.5, acc[1:7])
data[data$sid==sid, 'prev_acc'] = prev_acc
}
data$change_acc = data$acc - data$prev_acc
data$prev_acc = scale(data$prev_acc)
data$change_acc = scale(data$change_acc)
data$hyp2D = as.logical(data$X2drule_aic)
data$hypMatch = ((data$ruletype=='1D') & (!data$hyp2D)) | ((data$ruletype=='2D') & (data$hyp2D))
data$prev_hypMatch = NaN
for (sid in levels(data$sid)) {
hypm = data[data$sid==sid,]$hypMatch
prev_hypm = c(NaN, hypm[1:7])
data[data$sid==sid, 'prev_hypMatch'] = prev_hypm
}
m3 = brglm(hyp2D ~ ruletype*dimtype*block + block*((dimtype*ruletype)/rulerelation),
family=binomial, data=data, REML=F)
summary(m3)
m = m3
f = m
M = model.matrix(f)
# Save the "assign" and "contrasts" attributes of the model matrix.
attr.assign = attr(M, "assign")
attr.contrasts = attr(M, "contrasts")
rmvCols = c(1, which(summary(f)$aliased))
M = M[,-rmvCols] # Remove intercept column (required) and NA columns
# Reassign the "assign" attribute, removing the corresponding elements from it.
attr(M, "assign") = attr.assign[-rmvCols]
# Reassign the "contrasts" attribute to its original value
attr(M, "contrasts") = attr.contrasts
f2 = update(f, ~M)
summary(f2)
confint.default(f2)
m = f2
summary(m)
data$pred_hypMatch = predict(m, type='response')
r = ddply(data, c('dimtype', 'ruletype', 'block', 'rulerelation'), function(x) {
mn = mean(x$hypMatch)
mn_pr = mean(x$pred_hypMatch)
data.frame(obs=mn, pred=mn_pr)
})
p1 = ggplot(data=r[r$dimtype=='absolute' & r$ruletype=='1D',]) +
geom_line(aes(x=block, y=obs, col=rulerelation)) +
geom_line(aes(x=block, y=pred, col=rulerelation), linetype=2) +
ylim(0, 1)
p2 = ggplot(data=r[r$dimtype=='relative' & r$ruletype=='1D',]) +
geom_line(aes(x=block, y=obs, col=rulerelation)) +
geom_line(aes(x=block, y=pred, col=rulerelation), linetype=2) +
ylim(0, 1)
p3 = ggplot(data=r[r$dimtype=='absolute' & r$ruletype=='2D',]) +
geom_line(aes(x=block, y=obs, col=rulerelation)) +
geom_line(aes(x=block, y=pred, col=rulerelation), linetype=2) +
ylim(0, 1)
p4 = ggplot(data=r[r$dimtype=='relative' & r$ruletype=='2D',]) +
geom_line(aes(x=block, y=obs, col=rulerelation)) +
geom_line(aes(x=block, y=pred, col=rulerelation), linetype=2) +
ylim(0, 1)
grid.arrange(p1, p2, p3, p4)
head(data)
# visualize predictions
data$pred_hyp2D = predict(m, type='response')
r = ddply(data, c('dimtype', 'ruletype', 'block', 'rulerelation'), function(x) {
mn = mean(x$hyp2D)
mn_pr = mean(x$pred_hyp2D)
data.frame(obs=mn, pred=mn_pr)
})
r
p1 = ggplot(data=r[r$dimtype=='absolute' & r$ruletype=='1D',]) +
geom_line(aes(x=block, y=obs, col=rulerelation)) +
geom_line(aes(x=block, y=pred, col=rulerelation), linetype=2) +
ylim(0, 1)
p2 = ggplot(data=r[r$dimtype=='relative' & r$ruletype=='1D',]) +
geom_line(aes(x=block, y=obs, col=rulerelation)) +
geom_line(aes(x=block, y=pred, col=rulerelation), linetype=2) +
ylim(0, 1)
p3 = ggplot(data=r[r$dimtype=='absolute' & r$ruletype=='2D',]) +
geom_line(aes(x=block, y=obs, col=rulerelation)) +
geom_line(aes(x=block, y=pred, col=rulerelation), linetype=2) +
ylim(0, 1)
p4 = ggplot(data=r[r$dimtype=='relative' & r$ruletype=='2D',]) +
geom_line(aes(x=block, y=obs, col=rulerelation)) +
geom_line(aes(x=block, y=pred, col=rulerelation), linetype=2) +
ylim(0, 1)
grid.arrange(p1, p2, p3, p4)
D1_ABS_CHEM       = c(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_ABS_FERT       = c(1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0)
D1_REL_CHEM       = c(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0)
D1_REL_FERT       = c(1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0)
D2_ABS_POS        = c(1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
D2_ABS_NEG        = c(1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0)
D2_REL_POS        = c(1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0)
D2_REL_NEG        = c(1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0)
block_D1_ABS_CHEM = c(0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0)
block_D1_ABS_FERT = c(0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0)
block_D1_REL_CHEM = c(0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0)
block_D1_REL_FERT = c(0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0)
block_D2_ABS_POS  = c(0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
block_D2_ABS_NEG  = c(0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0)
block_D2_REL_POS  = c(0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0)
block_D2_REL_NEG  = c(0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,1)
c1 = rbind("D1_ABS - D1_REL" = ((D1_ABS_CHEM + D1_ABS_FERT)/2 - (D1_REL_CHEM + D1_REL_FERT)/2),
"D1_ABS - D2_ABS" = ((D1_ABS_CHEM + D1_ABS_FERT)/2 - (D2_ABS_POS + D2_ABS_NEG)/2),
"D1_ABS - D2_REL" = ((D1_ABS_CHEM + D1_ABS_FERT)/2 - (D2_REL_POS + D2_REL_NEG)/2),
"D1_REL - D2_ABS" = ((D1_REL_CHEM + D1_REL_FERT)/2 - (D2_ABS_POS + D2_ABS_NEG)/2),
"D1_REL - D2_REL" = ((D1_REL_CHEM + D1_REL_FERT)/2 - (D2_REL_POS + D2_REL_NEG)/2),
"D2_ABS - D2_REL" = ((D2_ABS_POS + D2_ABS_NEG)/2 - (D2_REL_POS + D2_REL_NEG)/2),
"D1_ABS_CHEM - D1_ABS_FERT" = D1_ABS_CHEM - D1_ABS_FERT,
"D1_REL_CHEM - D1_REL_FERT" = D1_REL_CHEM - D1_REL_FERT,
"D2_ABS_POS - D2_ABS_NEG" = D2_ABS_POS - D2_ABS_NEG,
"D2_REL_POS - D2_REL_NEG" = D2_REL_POS - D2_REL_NEG,
"block_D1_ABS_CHEM" = block_D1_ABS_CHEM,
"block_D1_ABS_FERT" = block_D1_ABS_FERT,
"block_D1_REL_CHEM" = block_D1_REL_CHEM,
"block_D1_REL_FERT" = block_D1_REL_FERT,
"block_D2_ABS_POS" = block_D2_ABS_POS,
"block_D2_ABS_NEG" = block_D2_ABS_NEG,
"block_D2_REL_POS" = block_D2_REL_POS,
"block_D2_REL_NEG" = block_D2_REL_NEG
)
summary(glht(m, c1), test = adjusted("bonferroni"))
summary(m)
c1 = rbind("D1_ABS - D1_REL" = ((D1_ABS_CHEM + D1_ABS_FERT)/2 - (D1_REL_CHEM + D1_REL_FERT)/2),
"D1_ABS - D2_ABS" = ((D1_ABS_CHEM + D1_ABS_FERT)/2 - (D2_ABS_POS + D2_ABS_NEG)/2),
"D1_ABS - D2_REL" = ((D1_ABS_CHEM + D1_ABS_FERT)/2 - (D2_REL_POS + D2_REL_NEG)/2),
"D1_REL - D2_ABS" = ((D1_REL_CHEM + D1_REL_FERT)/2 - (D2_ABS_POS + D2_ABS_NEG)/2),
"D1_REL - D2_REL" = ((D1_REL_CHEM + D1_REL_FERT)/2 - (D2_REL_POS + D2_REL_NEG)/2),
"D2_ABS - D2_REL" = ((D2_ABS_POS + D2_ABS_NEG)/2 - (D2_REL_POS + D2_REL_NEG)/2),
"D1_ABS_CHEM - D1_ABS_FERT" = D1_ABS_CHEM - D1_ABS_FERT,
"D1_REL_CHEM - D1_REL_FERT" = D1_REL_CHEM - D1_REL_FERT,
"D2_ABS_POS - D2_ABS_NEG" = D2_ABS_POS - D2_ABS_NEG,
"D2_REL_POS - D2_REL_NEG" = D2_REL_POS - D2_REL_NEG,
"block_D1_ABS_CHEM" = block_D1_ABS_CHEM,
"block_D1_ABS_FERT" = block_D1_ABS_FERT,
"block_D1_REL_CHEM" = block_D1_REL_CHEM,
"block_D1_REL_FERT" = block_D1_REL_FERT,
"block_D2_ABS_POS" = block_D2_ABS_POS,
"block_D2_ABS_NEG" = block_D2_ABS_NEG,
"block_D2_REL_POS" = block_D2_REL_POS,
"block_D2_REL_NEG" = block_D2_REL_NEG
)
#summary(glht(m, c1), test = adjusted("bonferroni"))
summary(glht(m, c1), test = adjusted("none"))
#summary(glht(m, c1), test = adjusted("bonferroni"))
summary(glht(m, c1), test = adjusted("none"))
summary(glht(m, c1), test = adjusted("bonferroni"))
